Flux란?
- MVC 패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴
  (Unidirectional data flow)

1. action: 화면에서 발생하는 이벤트 또는 사용자의 입력
2. dispatcher: 데이터를 변경하는 방법, 메서드 (model 을 변경하기 위한 동작)
3. model: 화면에 표시할 데이터
4. view: 사용자에게 비춰지는 화면

[ Flux 패턴의 단방향 데이터 흐름 ]
Action --> Dispatcher --> Store --> View ( --> Action .... 단반향 반복)


[ Vuex 컨셉 ]
- State: 컴포넌트 간에 공유하는 데이터 data()
- View: 데이터를 표시하는 화면 template
- Action: 사용자의 입력에 따라 데이터를 변경하는 methods

** 단방향 데이터 흐름 처리를 단순하게 도식화한 그림 **
Action --> State --> View (--> Action.... 단방향 반복)

[Vuex 구조]
컴포넌트 --> 비동기 로직 --> 동기 로직 --> 상태

** vuex구조.png 참조 **

[ getters 란? ]
- state 값을 접근하는 속성이자 computed() 처럼 미리 연산된 값을 접근하는 방식
------------------------------------------------------
// store.js
state: {
  num: 10
},
getters: {
  getNumber(state) {
    return state.num;
  },
  doubleNumber(state) {
    return state.num * 2;
  }
}

<p>{{ this.$store.getters.getNumber}}</p>
<p>{{ this.$store.getters.doubleNumber}}</p>
------------------------------------------------------

[ mutations 란? ]
- state 의 값을 변경할 수 있는 유일한 방법이자 메서드
- 뮤테이션은 commit() 으로 동작 시킨다.

------------------------------------------------------
// store.js
state: { num : 10},
mutations: {
  printNumbers(state) {
    return state.num;
  },
  sumNumbers(state, anotherNum) {
    return state.num + antherNum;
  }
}

// App.vue ( commit : mutations 를 동작 시키는 명령어 )
this.$store.commit('printNumbers')
this.$store.commit('sumNumbers', 20)
------------------------------------------------------

[ mutations 의 commit() 형식 ]
- state 를 변경하기 위해 mutations를 동작시킬 때 인자(payload)를 전다 할 수 있음

------------------------------------------------------
// store.js
state: { storeNum: 10 },
mutations: {
  modifyState(state, payload) {
    console.log(payload.str);
    return state.storeNum == payload.num;
  }
}

// App.vue
this.$store.commit('modifyState', {
  str: 'passed from payload',
  num: 20,
})
------------------------------------------------------